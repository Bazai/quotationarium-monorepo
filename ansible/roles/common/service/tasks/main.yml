---
- name: Check service exists
  systemd:
    name: "{{ service_name }}"
  register: service_status
  failed_when: false
  changed_when: false
  when: service_manager == "systemd"
  tags:
    - service
    - validation

- name: Display service status
  debug:
    msg: "Service {{ service_name }} is {{ service_status.status.ActiveState | default('unknown') }}"
  when:
    - service_manager == "systemd"
    - service_status is defined
  tags:
    - service

- name: Stop systemd service
  systemd:
    name: "{{ service_name }}"
    state: stopped
  when:
    - service_action in ["stop", "restart"]
    - service_manager == "systemd"
    - service_status.status.ActiveState is defined
    - service_status.status.ActiveState == "active"
  become: yes
  register: service_stopped
  tags:
    - service

- name: Start systemd service
  systemd:
    name: "{{ service_name }}"
    state: started
    enabled: "{{ service_enabled | default(true) }}"
  when:
    - service_action in ["start", "restart"]
    - service_manager == "systemd"
  become: yes
  register: service_started
  tags:
    - service

- name: Check PM2 process status
  shell: |
    # Use same PM2 path as production configuration
    export PATH="/root/.nvm/versions/node/v20.13.1/bin:$PATH"
    pm2 describe {{ service_name }}
  register: pm2_status
  failed_when: false
  changed_when: false
  become_user: "{{ service_user | default('root') }}"
  when: service_manager == "pm2"
  tags:
    - service
    - validation

- name: Stop PM2 service
  shell: |
    # Use same PM2 path as production configuration
    export PATH="/root/.nvm/versions/node/v20.13.1/bin:$PATH"
    pm2 stop {{ service_name }}
  become_user: "{{ service_user | default('root') }}"
  when:
    - service_action in ["stop", "restart"]
    - service_manager == "pm2"
    - pm2_status.rc == 0
  register: pm2_stopped
  tags:
    - service

- name: Start PM2 service
  shell: |
    # Use same PM2 path as production configuration
    export PATH="/root/.nvm/versions/node/v20.13.1/bin:$PATH"
    pm2 start {{ service_name }}
  become_user: "{{ service_user | default('root') }}"
  when:
    - service_action in ["start", "restart"]
    - service_manager == "pm2"
    - pm2_status.rc != 0
  register: pm2_started
  failed_when: false
  tags:
    - service

- name: Restart existing PM2 service
  shell: |
    # Use same PM2 path as production configuration
    export PATH="/root/.nvm/versions/node/v20.13.1/bin:$PATH"
    pm2 restart {{ service_name }}
  become_user: "{{ service_user | default('root') }}"
  when:
    - service_action in ["start", "restart"]
    - service_manager == "pm2"
    - pm2_status.rc == 0
  register: pm2_restarted
  tags:
    - service

- name: Save PM2 configuration
  shell: |
    # Use same PM2 path as production configuration
    export PATH="/root/.nvm/versions/node/v20.13.1/bin:$PATH"
    pm2 save
  become_user: "{{ service_user | default('root') }}"
  when:
    - service_manager == "pm2"
    - (pm2_started is changed) or (pm2_restarted is changed)
  tags:
    - service

- name: Wait for service to be ready (port check)
  wait_for:
    port: "{{ service_port }}"
    host: "{{ service_host | default('localhost') }}"
    delay: "{{ service_start_delay | default(2) }}"
    timeout: "{{ service_timeout | default(30) }}"
  when:
    - service_port is defined
    - service_action in ["start", "restart"]
    - (service_started is changed) or (pm2_started is changed) or (pm2_restarted is changed)
  tags:
    - service
    - health-check

- name: Wait for socket-based service to be ready
  systemd:
    name: "{{ service_name }}.socket"
  register: socket_status
  failed_when: false
  changed_when: false
  when:
    - service_port is not defined
    - service_manager == "systemd"
    - service_action in ["start", "restart"]
    - (service_started is changed)
  tags:
    - service
    - health-check

- name: Verify socket is active
  debug:
    msg: "Socket {{ service_name }}.socket is {{ socket_status.status.ActiveState | default('unknown') }}"
  when: socket_status is defined
  tags:
    - service
    - health-check

- name: Verify service is running
  uri:
    url: "{{ service_health_url }}"
    method: GET
    status_code: [200, 301, 302]
    timeout: 10
  register: service_health
  retries: 3
  delay: 2
  when:
    - service_health_url is defined
    - service_action in ["start", "restart"]
  tags:
    - service
    - health-check

- name: Display service result
  debug:
    msg:
      - "Service action: {{ service_action }}"
      - "Service manager: {{ service_manager }}"
      - "Service status: {{ 'success' if ((service_started is changed) or (pm2_started is changed) or (pm2_restarted is changed)) else 'no change' }}"
      - "Health check: {{ 'passed' if (service_health.status | default(0) in [200, 301, 302]) else 'skipped' }}"
  tags:
    - service
