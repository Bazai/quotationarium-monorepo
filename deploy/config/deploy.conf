#!/bin/bash
# =============================================================================
# DEPLOYMENT CONFIGURATION LOADER
# =============================================================================
# This file provides a bash-compatible way to load configuration
# Usage: source config/deploy.conf [environment]
# Environment options: production, local, staging
# =============================================================================

# Default environment
DEFAULT_ENV="production"
DEPLOY_ENV="${1:-$DEFAULT_ENV}"

# Configuration directory
CONFIG_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEPLOY_ROOT="$(dirname "$CONFIG_DIR")"
PROJECT_ROOT="$(dirname "$DEPLOY_ROOT")"

# Load main configuration
load_deployment_config() {
    local env_file="$CONFIG_DIR/.env.$DEPLOY_ENV"
    
    # Check if config file exists
    if [ ! -f "$env_file" ]; then
        echo "‚ùå Configuration file not found: $env_file"
        echo "Available configurations:"
        ls -1 "$CONFIG_DIR"/.env.* 2>/dev/null | sed 's|.*/\.env\.||' | sed 's/^/  - /'
        exit 1
    fi
    
    echo "üìã Loading configuration: $DEPLOY_ENV"
    
    # Export all variables from env file
    set -a  # automatically export all variables
    source "$env_file"
    set +a
    
    # Load secrets if they exist
    local secrets_file="$CONFIG_DIR/.env.secrets"
    if [ -f "$secrets_file" ]; then
        echo "üîê Loading secrets..."
        source "$secrets_file"
    else
        echo "‚ö†Ô∏è  No secrets file found (optional): $secrets_file"
    fi
    
    # Set computed variables
    export DEPLOY_ENV
    export CONFIG_DIR
    export DEPLOY_ROOT
    export PROJECT_ROOT
    export TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    
    echo "‚úÖ Configuration loaded for: $ENVIRONMENT environment"
}

# Validate required configuration
validate_config() {
    local required_vars=(
        "ENVIRONMENT"
        "FRONTEND_SOURCE_PATH"
        "BACKEND_SOURCE_PATH"
        "FRONTEND_PROD_PATH"
        "BACKEND_PROD_PATH"
        "SERVICE_USER"
    )
    
    local missing_vars=()
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -gt 0 ]; then
        echo "‚ùå Missing required configuration variables:"
        printf '  - %s\n' "${missing_vars[@]}"
        exit 1
    fi
    
    # Validate paths
    if [ ! -d "$FRONTEND_SOURCE_PATH" ]; then
        echo "‚ùå Frontend source path does not exist: $FRONTEND_SOURCE_PATH"
        exit 1
    fi
    
    if [ ! -d "$BACKEND_SOURCE_PATH" ]; then
        echo "‚ùå Backend source path does not exist: $BACKEND_SOURCE_PATH"
        exit 1
    fi
}

# Display current configuration (for debugging)
show_config() {
    echo "üìä Current Configuration ($DEPLOY_ENV):"
    echo "=================================="
    echo "Environment: $ENVIRONMENT"
    echo "App Name: $APP_NAME"
    echo ""
    echo "Frontend:"
    echo "  Source: $FRONTEND_SOURCE_PATH"
    echo "  Production: $FRONTEND_PROD_PATH"
    echo "  Backup: $FRONTEND_BACKUP_DIR"
    echo "  Service: $FRONTEND_SERVICE_NAME ($FRONTEND_SERVICE_MANAGER)"
    echo ""
    echo "Backend:"
    echo "  Source: $BACKEND_SOURCE_PATH"
    echo "  Production: $BACKEND_PROD_PATH"
    echo "  Backup: $BACKEND_BACKUP_DIR"
    echo "  Service: $BACKEND_SERVICE_NAME ($BACKEND_SERVICE_MANAGER)"
    echo ""
    echo "Database:"
    echo "  Host: $DB_HOST:$DB_PORT"
    echo "  Database: $DB_NAME"
    echo "  User: $DB_USER"
    echo ""
    echo "Network:"
    echo "  Frontend: $FRONTEND_URL"
    echo "  Backend: $BACKEND_URL"
    echo ""
    echo "Options:"
    echo "  Skip Tests: $SKIP_TESTS"
    echo "  Skip Backup: $SKIP_BACKUP"
    echo "  Verbose: $VERBOSE"
    echo "  Dry Run: $DRY_RUN"
}

# Auto-load configuration if this file is sourced
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    # File is being sourced, load config automatically
    load_deployment_config "$@"
fi